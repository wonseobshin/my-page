{"version":3,"sources":["logo.svg","components/Navbar.js","components/PageModule.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","useState","scrolled","setScrolled","useEffect","window","addEventListener","scrollY","console","log","className","PageModule","props","title","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,kC,oHCQ5B,SAASC,IAAU,IAAD,EACCC,mBAAS,IADV,mBACxBC,EADwB,KACdC,EADc,KAe/B,OAZAC,qBAAU,WACRC,OAAOC,iBAAiB,UAAU,WACV,IAAnBD,OAAOE,SACRJ,EAAY,IACZK,QAAQC,IAAI,kBAEZN,EAAY,YACZK,QAAQC,IAAI,kBAGhB,IAGA,yBAAKC,UAAS,gCAA2BR,IACvC,yBAAKQ,UAAU,kBAEX,wBAAIA,UAAU,sBAAd,kBAGJ,yBAAKA,UAAU,oBACb,iCC7BO,SAASC,EAAWC,GAOjC,OANAR,qBAAU,cAER,IAEFI,QAAQC,IAAIG,GAGV,oCACA,4BAAKA,EAAMC,OACX,yBAAKH,UAAU,YAAf,6mCCsBWI,MA5Bf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAACV,EAAD,MACA,4BAAQU,UAAU,cAAlB,gBAgBA,kBAACC,EAAD,CAAYE,MAAM,sBAClB,kBAACF,EAAD,CAAYE,MAAM,sBAClB,kBAACF,EAAD,CAAYE,MAAM,sBAClB,kBAACF,EAAD,CAAYE,MAAM,wBCjBJE,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.faf7dee0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\";\r\n// import { Link } from 'react-router-dom'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\n\r\nexport default function Navbar() {\r\n  const [scrolled, setScrolled] = useState(\"\");\r\n\r\n  useEffect(()=>{\r\n    window.addEventListener('scroll', () => {\r\n      if(window.scrollY === 0){\r\n        setScrolled(\"\")\r\n        console.log(\"not scrolled\")\r\n      } else {\r\n        setScrolled(\"scrolled\")\r\n        console.log(\"scrolled\")\r\n      }\r\n    });\r\n  },[])\r\n  \r\n  return (\r\n    <nav className={`nav-bar nav-container ${scrolled}`}>\r\n      <div className=\"logo-container\">\r\n        {/* <Link to={`/`}> */}\r\n          <h1 className=\"nav-item main-logo\">Won Seob Shin</h1>\r\n        {/* </Link> */}\r\n      </div>\r\n      <div className=\"search-container\">\r\n        <form>\r\n          {/* <TextField\r\n            id=\"filled-search\"\r\n            label=\"Search field\"\r\n            type=\"search\"\r\n            className=\"search\"\r\n            margin=\"normal\"\r\n            variant=\"filled\"\r\n          /> */}\r\n          {/* <Paper>\r\n            \r\n            <InputBase\r\n              className=\"searchInput\"\r\n              placeholder=\"Search Articles: Try 'Pyramids'\"\r\n              inputProps={{ 'aria-label': 'Search Google Maps' }}\r\n            />\r\n            <IconButton className=\"iconButton\" aria-label=\"Search\">\r\n              <SearchIcon />\r\n            </IconButton>\r\n            \r\n          </Paper> */}\r\n        </form>\r\n      </div>\r\n    </nav>\r\n  );\r\n}","import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function PageModule(props) {\r\n  useEffect(()=>{\r\n    \r\n  },[])\r\n  \r\n  console.log(props)\r\n\r\n  return (\r\n    <>\r\n    <h2>{props.title}</h2>\r\n    <div className=\"bodytext\">\r\n            Lorem ipsum dolor sit amet, eius erant cetero te sed, cu nam putant quaeque eloquentiam, mel velit vitae aliquid et. Te eius atomorum accommodare nec. Pro ut aeque essent, quem cetero ad eam. Audiam inermis volutpat pri at, in usu decore doming.\r\n        \r\n        Tractatos qualisque sit an, cum eu adhuc vituperatoribus, nec ea choro vocibus reprehendunt. Ut elit discere democritum sed, sit accommodare definitiones cu, ne usu vidit indoctum ullamcorper. Sumo esse vis ex. Eum no dicat accusata, vim in audire sanctus, sanctus recteque has eu.\r\n        \r\n        His an fugit tacimates. Ea vim elitr ornatus, no eum esse errem nusquam. Quo alia reque labitur no, mei ut feugiat dignissim. Noster maluisset deseruisse usu eu, quis labore discere quo eu. Et quo rebum bonorum habemus.\r\n        \r\n        Incorrupte definitionem nec id, mea no agam dicant, tota mandamus ad per. Mel quas persius utroque et. Eros epicuri democritum mel te, mea dicam perfecto ut. Sumo nusquam convenire in sea.\r\n        \r\n        Id tota habemus temporibus sed, et fuisset copiosae mea. Possim alienum et sea, ei porro consulatu torquatos sed, eos inani prodesset eu. Ex solet ceteros alienum quo. Ei pro aperiri malorum.\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport Navbar from './components/Navbar';\nimport PageModule from './components/PageModule';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n\n        Hello World!\n      </header>\n      <PageModule title=\"lorem ipsum title\" />\n      <PageModule title=\"lorem ipsum title\" />\n      <PageModule title=\"lorem ipsum title\" />\n      <PageModule title=\"lorem ipsum title\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}